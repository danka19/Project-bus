<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_passenger</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>750</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// M A S S

physics_mass_properties(5,0,0,phy_inertia)



 var inst,angle;
 inst = instance_nearest(x,y,reg_entrance)
 angle = point_direction(x,y,inst.x,inst.y);
 
 
seat=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if phy_rotation&lt;0
 {phy_rotation=360};
if phy_rotation&gt;360
 {phy_rotation=0};
 


/// M O V E M E N T

if keyboard_check(ord('W'))
 {physics_apply_local_impulse(0,0,10,0)};
if keyboard_check(ord('S'))
 {physics_apply_local_impulse(0,0,-10,0)};
 
if keyboard_check(ord('A'))
 {phy_rotation-=5};
if keyboard_check(ord('D'))
 {phy_rotation+=5};
 
 
scr_ai_passenger();

 
 
/*
 var x1, y1, x2, y2; 
 x1 = lengthdir_x(1, phy_rotation); 
 y1 = lengthdir_y(1, phy_rotation); 
 x2 = obj_passenger.x - x; 
 y2 = obj_passenger.y - y; 
 if dot_product(x1, y1, x2, y2) &gt; 0 seen=true else seen=false; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="reg_collision">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//COLLISION YEAH</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_passenger">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// COLLISION RRAAAARWR!</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>



draw_self();
if phy_speed_x &gt; 0 || phy_speed_x &lt; 0 || phy_speed_y &gt; 0 || phy_speed_y &lt; 0
 {image_speed=0.25};
else
 {image_speed=0;image_index=0};
 

// DEBUG
/*
if keyboard_check(vk_left)
 {physics_mass_properties(phy_mass-0.1,0,0,phy_inertia)};
if keyboard_check(vk_right)
 {physics_mass_properties(phy_mass+0.1,0,0,phy_inertia)};

draw_text(12,12,string('PHY_MASS = ')+string(phy_mass));
draw_text(12,24,string('PHY_SPEED_X = ')+string(phy_speed_x));
draw_text(12,36,string('PHY_SPEED_Y = ')+string(phy_speed_y));
*/


draw_text(12,12,string('POINT_DIRECTION (ANGLE) = ')+string(round(point_direction(x,y,instance_nearest(x,y,reg_entrance).x,instance_nearest(x,y,reg_entrance).y))));
draw_text(12,24,string('PHY_ROTATION = ')+string(abs(round(phy_rotation))));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>10</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>1000</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,9</point>
    <point>14,9</point>
    <point>17,11</point>
    <point>17,14</point>
    <point>14,16</point>
    <point>11,16</point>
    <point>8,14</point>
    <point>8,11</point>
  </PhysicsShapePoints>
</object>
