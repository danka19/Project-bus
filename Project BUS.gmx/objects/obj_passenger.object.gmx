<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_passenger</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>750</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
<<<<<<< HEAD
            <string>


// LOVE SEAT
love_seat=irandom_range(1,global.seats);
// FIND LOVE SEAT
id_love_seat = 0;
// 7
 var inst,xx,yy,size,i;
    inst=0;
    xx=120;
    yy=144;
    size=24;
    i=1;
 repeat(7)
// Возможна ошибка в коллизии/условии
// Тогда хх и уу нужно поменять на хх+((sprite_width/2)-1),yy+((sprite_height/2)
  {inst = instance_position(xx+((sprite_width/2)-1),(yy+(sprite_height/2))+(size*i),obj_seat)
   if inst.seat_num = love_seat
    {id_love_seat = inst};i+=1;};
// 3
  var x2,y2,i2;
    x2=168;
    y2=192;
    i2=1;
 repeat(3)
  {inst = instance_position(x2+((sprite_width/2)-1),(y2+(sprite_height/2))+(size*i2),obj_seat)
   if inst.seat_num = love_seat
    {id_love_seat = inst};i2+=1;};
// 2
  var x3,y3,size2,i3;
    x3=168;
    y3=144;
    i3=1;
 repeat(2)
  {inst = instance_position(x3+((sprite_width/2)-1),(y3+(sprite_height/2))+(size*i3),obj_seat)
   if inst.seat_num = love_seat
    {id_love_seat = inst};i3+=6;};

// NEXT SEAT (TO FIND FREE SEAT IF LOVE_SEAT IS TAKEN
next_seat = love_seat;
=======
            <string>// ROTATION DIRECTION
rot_dir=0;


>>>>>>> origin/master

// STAGING
stage = 0;

// M A S S
physics_mass_properties(5,0,0,phy_inertia);

// S I T T I N G 
seat=0;

// Angular speed
a_speed = 5;
clamp(a_speed,0,5);

// ANGLE
phy_rotation = irandom_range(120,250);

// ANGULAR FORCE
angular_force = 5;
angular_force_low = 1;
// FORCE
force_low =1;
force = 5;
random_force = irandom_range(1,3);


// D E B U G
 
// var inst,angle,rot,point_x,point_y;
 inst = instance_nearest(x,y,reg_entrance);
 point_x = irandom_range(inst.x,(inst.x+sprite_width));
 point_y = irandom_range(inst.y,(inst.y+sprite_height));
 angle = round(point_direction(x,y,point_x,point_y));
 rot = round(phy_rotation);
 
// +++
 inst2 = instance_nearest(x,y,reg_inside);
 point_x2 = irandom_range(inst2.x,(inst2.x+sprite_width));
 point_y2 = irandom_range(inst2.y,(inst2.y+sprite_height));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if phy_rotation&lt;0
 {phy_rotation=360-abs(phy_rotation)};
if phy_rotation&gt;360
 {phy_rotation=0+(phy_rotation-360)};
 


/// M O V E M E N T

if keyboard_check(ord('W'))
 {physics_apply_local_impulse(0,0,10,0)};
if keyboard_check(ord('S'))
 {physics_apply_local_impulse(0,0,-10,0)};
 
if keyboard_check(ord('A'))
 {phy_rotation-=5};
if keyboard_check(ord('D'))
 {phy_rotation+=5};

// ROTATING

 
//SCRIPTING
 
//scr_ai_passenger();
scr_ai_passenger_entrance();

rot = round(phy_rotation);
 
 
/*
 var x1, y1, x2, y2; 
 x1 = lengthdir_x(1, phy_rotation); 
 y1 = lengthdir_y(1, phy_rotation); 
 x2 = obj_passenger.x - x; 
 y2 = obj_passenger.y - y; 
 if dot_product(x1, y1, x2, y2) &gt; 0 seen=true else seen=false; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="reg_collision">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//COLLISION YEAH</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_passenger">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// COLLISION RRAAAARWR!</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>



draw_self();

// A N I M A T I O N

if phy_speed_x &gt; 0 || phy_speed_x &lt; 0 || phy_speed_y &gt; 0 || phy_speed_y &lt; 0
 {image_speed=0.25};
else
 {image_speed=0;image_index=0};
 
draw_text(12,12,string('POINT_DIRECTION (ANGLE) = ')+string(round(point_direction(x,y,instance_nearest(x,y,reg_entrance).x,instance_nearest(x,y,reg_entrance).y))));
draw_text(12,24,string('PHY_ROTATION = ')+string(abs(round(phy_rotation))));
// OLD
draw_text(12,36,string('ROT SUMMARY = ')+string((rot+180)-360));
draw_text(12,48,string('FORMULA = ')+string(rot-(360-angle)));
draw_text(12,60,string('ROT = ')+string(rot));
// NEW
draw_text(12,72,string('NEW_ROT SUMMARY = ')+string((phy_rotation+180)-360));
draw_text(12,84,string('NEW_FORMULA = ')+string(phy_rotation-(360-angle)));
draw_text(12,96,string('NEW_ROT = ')+string(phy_rotation));

<<<<<<< HEAD
draw_text(12,108,string('POINT_DISTANCE1 = ')+string(point_distance(x,y,point_x,point_y)));
draw_text(12,120,string('POINT_DISTANCE2 = ')+string(point_distance(x,y,point_x2,point_y2)));
=======
draw_text(12,118,string('ROT_DIRECTION=')+string(rot_dir));
>>>>>>> origin/master
//draw_text(12,108,string(rot180));
draw_text(12,132,string('GLOBAL_SEATS = ')+string(global.seats));

draw_text(x,y,string(stage));
// DEBUG
if stage = 1
{draw_line(point_x-15,point_y,point_x+15,point_y);
 draw_line(point_x,point_y-15,point_x,point_y+15);
 draw_line(x,y,point_x,point_y);};
if stage = 2
 {draw_line(point_x2-15,point_y2,point_x2+15,point_y2);
 draw_line(point_x2,point_y2-15,point_x2,point_y2+15);
 draw_line(x,y,point_x2,point_y2);};

/*

//  A I

// ENTRANCE
 inst = instance_nearest(x,y,reg_entrance);
// point_x = irandom_range(inst.x,(inst.x+sprite_width));s
// point_y = irandom_range(inst.y,(inst.y+sprite_height));
 angle = round(point_direction(x,y,point_x,point_y));
 rot = round(phy_rotation);

// CREST 
 draw_line(point_x-15,point_y,point_x+15,point_y);
 draw_line(point_x,point_y-15,point_x,point_y+15);
//

if !position_meeting(x, y, reg_entrance) &amp;&amp; x&gt;200
 {
 if rot != 360 - angle
  {
  if angle &lt; 180
   {phy_rotation -=1};
  else 
   {phy_rotation +=1};
  };
 else
  {
  {physics_apply_local_impulse(0,0,15,0)};
  };
 };
 

// INSIDE BUS

else
 {
 inst = instance_nearest(x,y,reg_inside);
// point_x = irandom_range(inst.x,(inst.x+sprite_width));s
// point_y = irandom_range(inst.y,(inst.y+sprite_height));
 angle = round(point_direction(x,y,point_x2,point_y2));
 rot = round(phy_rotation);
 if !position_meeting(x, y, reg_inside) &amp;&amp; x&gt;144
 {
 if rot != 360 - angle
  {
  if rot &gt; 360 - angle
   {phy_rotation -=1};
  else 
   {phy_rotation +=1};
  };
 else
  {
  {physics_apply_local_impulse(0,0,15,0)};
  };
 };
 else
  {
  var seat,angle,rot;
  seat = instance_nearest(x,y,obj_seat);
  angle = round(point_direction(x,y,seat.x,seat.y));
  rot = round(phy_rotation);
  if !position_meeting(x,y,obj_seat)
   {
   if rot != 360 - angle
     {
   if rot &gt; 360 - angle
     {phy_rotation -=1};
  else 
     {phy_rotation +=1};
     };
   };
  else
   {
    {physics_apply_local_impulse(0,0,15,0)};
   };
  };
 
 
 // CREST 
 draw_line(point_x2-15,point_y2,point_x2+15,point_y2);
 draw_line(point_x2,point_y2-15,point_x2,point_y2+15);
 //


 };


/*
if keyboard_check(vk_left)
 {physics_mass_properties(phy_mass-0.1,0,0,phy_inertia)};
if keyboard_check(vk_right)
 {physics_mass_properties(phy_mass+0.1,0,0,phy_inertia)};

draw_text(12,12,string('PHY_MASS = ')+string(phy_mass));
draw_text(12,24,string('PHY_SPEED_X = ')+string(phy_speed_x));
draw_text(12,36,string('PHY_SPEED_Y = ')+string(phy_speed_y));
/



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>10</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>1000</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,9</point>
    <point>14,9</point>
    <point>17,11</point>
    <point>17,14</point>
    <point>14,16</point>
    <point>11,16</point>
    <point>8,14</point>
    <point>8,11</point>
  </PhysicsShapePoints>
</object>
